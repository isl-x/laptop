#!/bin/sh

# Welcome to the ISL laptop script!
# Be prepared to turn your laptop (or desktop)
# into a fairly decent development machine.

#
# install OS X developer tools
#

xcode-select -p > /dev/null 2>&1

if [ $? -ne 0 ]
then
    xcode-select --install
fi

#
# check for oh-my-zsh
#

if [ ! -d "$HOME/.oh-my-zsh" ]; then
  echo "oh-my-zsh is required to continue"
  echo "run the following command, then re-run this script:"
  echo "sh -c \"\$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\""
  exit 1
fi

#
# utilities
#

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if ! grep -qs "^$text$" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

create_file() {
  local file="$1"

  if [ ! -f "$file" ]; then
    touch "$file"
  fi
}

curl_to_file() {
  local file="$1"
  local url="$2"

  if [ ! -f "$file" ]; then
    curl "$url" > "$file"
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

create_file "$HOME/.bash_profile"

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    # shellcheck disable=SC2016
    append_to_file "$HOME/.zshrc" 'export PATH="/usr/local/bin:$PATH"'

else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

brew update
brew tap 'homebrew/bundle'

curl_to_file "$HOME/Brewfile" \
  "https://raw.githubusercontent.com/istrategylabs/laptop/master/Brewfile"

brew bundle --file="$HOME/Brewfile"

rm "$HOME/Brewfile"


#
# PostgreSQL
#

initdb /usr/local/var/postgres


#
# languages
#


# Go
if [ ! -d "$HOME/.gvm" ]; then
  curl -fsS \
    'https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer' | bash
fi


# Node
curl -fsS \
  'https://raw.githubusercontent.com/creationix/nvm/v0.30.1/install.sh' | bash


# Python
if ! pip3 list | ack "virtualenvwrapper" > /dev/null; then
  fancy_echo 'Installing virtualenvwrapper...'
  pip3 install virtualenvwrapper
  append_to_file "$HOME/.zshrc" 'export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3'
  append_to_file "$HOME/.zshrc" 'export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv'
  append_to_file "$HOME/.zshrc" 'source /usr/local/bin/virtualenvwrapper.sh'
fi


# Ruby
append_to_file "$HOME/.gemrc" 'gem: --no-document'
fancy_echo 'Updating Rubygems...'
gem update --system
gem_install_or_update 'bundler'
fancy_echo "Configuring Bundler ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))


#
# configure Atom
#

pip3 install flake8

apm install editorconfig
apm install linter
apm install linter-eslint
apm install linter-flake8
apm install linter-jshint
apm install script
apm install set-syntax



echo "process.env.PATH = ['/usr/local/bin/', process.env.PATH].join(':')" \
    >> $HOME/.atom/init.coffee

# Foreman 
gem install foreman

#
# copy default config files
#

curl_to_file "$HOME/.editorconfig" \
  "https://raw.githubusercontent.com/istrategylabs/laptop/master/config/editorconfig"

curl_to_file "$HOME/.vimrc" \
  "https://raw.githubusercontent.com/istrategylabs/laptop/master/config/vimrc"
